{"version":3,"sources":["utils/functions.js","components/die/Dot.js","components/die/Dots.js","components/die/Die.js","components/dice/DiceWrapper.js","components/board/Board.js","App.js","index.js"],"names":["dice","diceList","label","position","value","state","color","roll","Math","floor","random","Dot","black","className","Dots","dieArray","dots","i","includes","push","map","dot","index","key","Die","die","onClick","utils","backgroundColor","data-pos","data-val","style","DiceWrapper","Board","props","Roll","updatePoints","rollRemainingDice","setState","disabled","points","newPoints","pointslabel","updatePointsPanel","EndRound","isValidSelection","score","round","rollAllDice","highScores","updateHighScores","console","log","highscores","prevState","sort","length","reverse","temp","pop","handleDieClick","e","pos","target","parentElement","dataset","changeStatus","clickedDie","forEach","elem","num","repaint","count","totalCount","valid","earnedPoints","href","id","this","isFinite","max","type","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd422a84.chunk.js","sourcesContent":["export const dice = [[5], [1, 9], [1, 5, 9], [1, 3, 7, 9], [1, 3, 5, 7, 9], [1, 3, 4, 6, 7, 9]];\nexport const diceList =\n    [\n        {\n            label: 'die1',\n            position: 0,\n            value: 0,\n            state: 'available',\n            color: 'white'\n        },\n        {\n            label: 'die2',\n            position: 0,\n            value: 0,\n            state: 'available',\n            color: 'white'\n        },\n        {\n            label: 'die3',\n            position: 0,\n            value: 0,\n            state: 'available',\n            color: 'white'\n        },\n        {\n            label: 'die4',\n            position: 0,\n            value: 0,\n            state: 'available',\n            color: 'white'\n        },\n        {\n            label: 'die5',\n            position: 0,\n            value: 0,\n            state: 'available',\n            color: 'white'\n        },\n        {\n            label: 'die6',\n            position: 0,\n            value: 0,\n            state: 'available',\n            color: 'white'\n        }\n    ]\n\n/**\n * returns a randome number between 1 and 6 corresponding the faces of a dice\n * @param {int} num \n */\nexport function roll() {\n    let rNumber = Math.floor(Math.random() * 6) + 1;\n    return rNumber;\n}\n\nexport function createDice() {\n    diceList.forEach((elem, index) => {\n        let num = roll();\n        elem.position = index;\n        elem.value = num;\n    });\n    return diceList;\n}\n\n\n\n/*export function changStatus(pos) {\n\n}\n*/\n\n","import React from 'react';\n\nexport const Dot = ({ black }) => {\n    return (\n        <div className={`dot ${black ? 'black' : ''}`}></div>\n    );\n} ","import React, { Fragment } from 'react';\nimport { Dot } from './Dot';\n\nexport const Dots = ({ dieArray }) => {\n    let dots = [];\n    for (let i = 1; i < 10; i++) {\n        if (dieArray.includes(i)) {\n            dots.push(true);\n        } else {\n            dots.push(false);\n        }\n    }\n    return (\n        <Fragment>\n            {dots.map((dot, index) => <Dot key={index} black={dot} />)}\n        </Fragment>\n\n    )\n}","import React from 'react';\nimport * as utils from '../../utils/functions';\nimport { Dots } from './Dots';\n\nexport const Die = ({ die, onClick }) => {\n\n    let dieArray = utils.dice[die.value - 1];\n    let backgroundColor = {\n        backgroundColor : die.color\n    }\n\n    return (\n\n        <div className={`dicer ${die.label}`} data-pos={`${die.position}`} data-val={`${die.value}`} onClick={onClick} style={backgroundColor}>\n            <Dots dieArray={dieArray} die={die} />\n        </div >\n\n    );\n}","import React, { Fragment } from 'react';\nimport { Die } from '../die/Die';\n\nexport const DiceWrapper = ({ dice, onClick }) => {\n    return (\n        <Fragment>\n            <Die die={dice[0]} onClick={onClick(dice[0])} />\n            <Die die={dice[1]} onClick={onClick(dice[1])} />\n            <Die die={dice[2]} onClick={onClick(dice[2])} />\n            <Die die={dice[3]} onClick={onClick(dice[3])} />\n            <Die die={dice[4]} onClick={onClick(dice[4])} />\n            <Die die={dice[5]} onClick={onClick(dice[5])} />\n        </Fragment>\n    );\n}","import React, { Component, Fragment } from 'react';\nimport { DiceWrapper } from '../dice/DiceWrapper';\nimport * as utils from '../../utils/functions';\n\nexport class Board extends Component {\n    constructor(props) {\n        super(props);\n\n        // initial die to appear on the page\n        utils.createDice();\n\n        this.state = {\n            dice: utils.diceList,\n            points: 0,\n            newPoints: 0,\n            pointslabel: 0,\n            round: 1,\n            score: 0,\n            disabled: false,\n            highscores: []\n        }\n    }\n\n    /**\n     * handles roll actions\n     */\n    Roll = () => {\n        this.updatePoints();\n        this.rollRemainingDice();\n        this.setState({\n            disabled: true\n        });\n    }\n\n    /**\n     * updatePoints\n     * updates the points label\n     */\n    updatePoints = () => {\n        this.setState({\n            points: this.state.points + this.state.newPoints,\n            newPoints: 0,\n            pointslabel: this.state.points,\n        }, () => this.updatePointsPanel());\n    }\n\n    updatePointsPanel = () => {\n        this.setState({\n            pointslabel: this.state.newPoints + this.state.points\n        });\n    }\n\n    /**\n     * handles end round clicks\n     */\n    EndRound = () => {\n        if (this.isValidSelection() && this.state.newPoints > 0) {\n            let score = this.state.score + this.state.points + this.state.newPoints;\n            this.setState({\n                score\n            });\n        }\n\n        this.setState({\n            newPoints: 0,\n            points: 0,\n            pointslabel: 0\n        });\n\n        if (this.state.round < 10) {\n            this.setState({\n                round: this.state.round + 1\n            });\n            this.rollAllDice();\n        } else {\n            let highScores = this.updateHighScores();\n            console.log(highScores);\n            console.log(this.state.highscores);\n            this.setState(prevState => ({\n                score: 0,\n                round: 1,\n                highscores: [...prevState.highscores]\n            }));\n            this.rollAllDice();\n        }\n    }\n\n    updateHighScores = () => {\n        let highscores = this.state.highscores;\n        highscores.sort();\n        if (highscores.length < 10 && !highscores.includes(this.state.score)) {\n            highscores.push(this.state.score);\n        } else {\n            highscores.reverse();\n            // if score is greater than other scores, insert score and remove lowest score\n            let temp = highscores[highscores.length - 1];\n            if (!(highscores.includes(this.state.score)) && (this.state.score > temp)) {\n                highscores.pop();\n                highscores.push(this.state.score);\n            }\n        }\n        highscores.sort();\n        return highscores;\n    }\n\n    /**\n     * handles actions associated with clicking on a die\n     */\n    handleDieClick = (e) => {\n        let pos = (e.target.parentElement.dataset['pos']) ? e.target.parentElement.dataset['pos'] : e.target.dataset['pos'];\n        this.changeStatus(pos);\n        this.clickedDie();\n    };\n\n    rollAllDice = () => {\n\n        utils.diceList.forEach(elem => {\n            // set all element states to available\n            elem.state = 'available';\n            // generate a random number\n            let num = utils.roll();\n            // set new value of die\n            elem.value = num;\n            this.repaint(elem.position);\n            this.setState({\n                dice: utils.diceList,\n                disabled: true\n            });\n\n            this.clickedDie();\n        });\n\n\n    }\n\n    rollRemainingDice = () => {\n\n        let count = 0;\n        utils.diceList.forEach(elem => {\n            if (elem.state === 'selected') {\n                elem.state = 'held';\n                this.setState({\n                    dice: utils.diceList\n                });\n            } else if (!(elem.state === 'held')) {\n                // generate a random number\n                let num = utils.roll();\n                // set new value of die\n                elem.value = num;\n                count++;\n                this.setState({\n                    dice: utils.diceList\n                });\n\n                this.clickedDie();\n            }\n        });\n\n        if (count === 0) {\n            this.rollAllDice();\n        }\n    };\n\n    clickedDie = () => {\n        let disabled = true;\n        if (this.isValidSelection()) {\n            disabled = false;\n        }\n        // call back method to automatically updated the points panel after disabled has been set\n        this.setState({\n            disabled\n        }, () => { this.updatePointsPanel() });\n    };\n\n\n    /**\n    * change state of clicked element to available vs selected\n    * @param {pos} int\n    */\n    changeStatus = (pos) => {\n        if (utils.diceList[pos].state === 'available') {\n            utils.diceList[pos].state = 'selected';\n            this.repaint(pos);\n            this.setState({\n                dice: utils.diceList\n            });\n        } else if (utils.diceList[pos].state === 'selected') {\n            utils.diceList[pos].state = 'available';\n            this.repaint(pos);\n            this.setState({\n                dice: utils.diceList\n            });\n        } else if (utils.diceList[pos].state === 'held') {\n            utils.diceList[pos].state = 'held';\n            this.repaint(pos);\n            this.setState({\n                dice: utils.diceList\n            });\n        }\n\n    }\n\n    repaint = (pos) => {\n        let status = utils.diceList[pos].state;\n        switch (status) {\n            case 'available':\n                utils.diceList[pos].color = 'white';\n                this.setState({\n                    dice: utils.diceList\n                });\n                break;\n            case 'selected':\n                utils.diceList[pos].color = 'red';\n                this.setState({\n                    dice: utils.diceList\n                });\n                break;\n            case 'held':\n                utils.diceList[pos].color = ' gray';\n                this.setState({\n                    dice: utils.diceList\n                });\n                break;\n            default:\n                break;\n        }\n    }\n\n    isValidSelection = () => {\n        const count = [0, 0, 0, 0, 0, 0];\n        let totalCount = 0;\n        let valid = true;\n        let earnedPoints = 0;\n        this.setState({\n            newPoints: 0\n        });\n\n        utils.diceList.forEach((elem) => {\n            if (elem.state === 'selected') {\n                let value = elem.value;\n                count[value - 1]++;\n                totalCount++;\n            }\n        });\n\n        if (totalCount === 0) {\n            valid = false;\n        } else if (count[0] === 1 && count[1] === 1 && count[2] === 1 &&\n            count[3] === 1 && count[4] === 1 && count[5] === 1 && count[6] === 1) {\n            earnedPoints += 250;\n            this.setState({\n                newPoints: earnedPoints\n            });\n        } else {\n\n            for (let i = 0; i < count.length; i++) {\n                switch (count[i]) {\n                    case 1:\n                        if (i === 0) {\n                            earnedPoints += 10;\n                            this.setState({\n                                newPoints: earnedPoints\n                            });\n\n                        } else if (i === 4) {\n                            earnedPoints += 5;\n                            this.setState({\n                                newPoints: earnedPoints\n                            });\n\n                        } else {\n                            valid = false;\n                        }\n                        break;\n                    case 2:\n                        if (i === 0) {\n                            earnedPoints += 20;\n                            this.setState({\n                                newPoints: earnedPoints\n                            });\n\n                        } else if (i === 4) {\n                            earnedPoints += 10;\n                            this.setState({\n                                newPoints: earnedPoints\n                            });\n                        } else {\n                            valid = false;\n                        }\n                        break;\n                    case 3:\n                        if (i === 0) {\n                            earnedPoints += 100;\n                            this.setState({\n                                newPoints: earnedPoints\n                            });\n                        } else {\n                            earnedPoints += (10 * (i + 1));\n                            this.setState({\n                                newPoints: earnedPoints\n                            });\n                        }\n                        break;\n                    case 4:\n                        earnedPoints += 200;\n                        this.setState({\n                            newPoints: earnedPoints\n                        });\n                        break;\n                    case 5:\n                        earnedPoints += 300;\n                        this.setState({\n                            newPoints: earnedPoints\n                        });\n                        break;\n                    case 6:\n                        earnedPoints += 500;\n                        this.setState({\n                            newPoints: earnedPoints\n                        });\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        return valid;\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <div className=\"gameBoard\">\n                    <div className=\"gameInfo\">\n                        <div className=\"winnersCircle\"><a href=\"!#\"><i className=\"fa fa-list-ul\"></i></a></div>\n                        <div className=\"gameRules\"><a href=\"!#\"><i className=\"fa fa-info-circle\"></i></a></div>\n                    </div>\n                    <div id=\"title\">Greedy</div>\n                    <div className=\"wrapper\">\n                        <div className=\"results\">\n                            <div className=\"label__r\">Rounds:</div>\n                            <div className=\"label__info lbl_rounds\">{this.state.round}</div>\n                            <div className=\"label__s\">Score:</div>\n                            <div className=\"label__info lbl_score\">{this.state.score}</div>\n                        </div>\n                        <div className=\"diceWrapper\">\n                            <div className=\"points\">\n                                <div className=\"label\">Points:</div>\n                                <div className=\"label_info lbl_points\">{this.state.pointslabel}</div>\n                            </div>\n                            <div className=\"dicePanel\">\n                                <DiceWrapper dice={this.state.dice} onClick={e => this.handleDieClick} />\n                            </div>\n                        </div>\n                        <div className=\"prevScore\">The previous high score was <span className=\"highScore\">{isFinite(Math.max(...this.state.highscores)) ? Math.max(...this.state.highscores) : 0}</span></div>\n                    </div>\n                    <div className=\"buttons\">\n                        <button type=\"button\" id=\"roll\" onClick={this.Roll} disabled={this.state.disabled}>Roll</button>\n                        <button type=\"button\" id=\"end-round\" onClick={this.EndRound}>End Round</button>\n                    </div>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\n","import React from 'react';\n\nimport { Board } from './components/board/Board';\n\n\nimport './components/board/Board.css';\nimport './components/info/Info.css';\nimport './components/die/Die.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}